---
import Link from "./Link.astro";
const { links = [] } = Astro.props;
---

<header id="mobil-header" class=" fixed top-0 w-screen z-[2000]">
  <!-- Mobile icons  -->
  <button
    id="burger-button"
    class="w-full flex flex-row justify-end pr-padding-ml pt-padding-ml fixed z-50 lg:hidden transition-opacity duration-200"
  >
    <div
      id="streger"
      class="open-icon transition-transform duration-300 opacity-100 scale-100"
    >
      <img src="/svg/streger.svg" alt="Burger" />
    </div>
    <div
      id="kryds"
      class="close-icon transition-transform duration-300 opacity-0 scale-75 absolute"
    >
      <img src="/svg/kryds.svg" alt="Kryds" />
    </div>
  </button>

  <!-- Mobile menu -->
  <div
    id="mobile-menu"
    class="bg-gradient-to-b from-mist to-violet fixed w-full h-full flex items-center justify-center opacity-0 transition-opacity duration-300 lg:hidden"
  >
    <nav>
      <ul class="flex flex-col text-center gap-padding-ml">
        <Link variant="primary" input="Hjem" size="large" href="/#hero" />
        <Link variant="primary" input="Om" size="large" href="/#om" />
        <Link
          variant="primary"
          input="Projekter"
          size="large"
          href="/#projekter"
        />
        <Link variant="primary" input="Kontakt" size="large" href="#footer" />
      </ul>
    </nav>
  </div>
</header>

<header id="desktop-header" class="w-screen fixed top-0">
  <!-- Desktop menu -->
  <div
    class="hidden lg:block mt-padding-s mx-padding-xl border-b border-obsidian"
  >
    <div class="flex justify-center gap-padding-xl">
      <Link variant="primary" input="Hjem" size="large" href="/#hero" />
      <Link variant="primary" input="Om" size="large" href="/#om" />
      <Link
        variant="primary"
        input="Projekter"
        size="large"
        href="/#projekter"
      />
      <Link variant="primary" input="Kontakt" size="large" href="#footer" />
    </div>
  </div>

  <script>
    // Get all the section links and sections
    const navLinks = document.querySelectorAll("[data-navlink]");
    const sections = document.querySelectorAll("section");

    function setActiveLink() {
      let currentSection = null;

      sections.forEach((section) => {
        const sectionTop = section.offsetTop;
        const sectionHeight = section.offsetHeight;
        const scrollPosition = window.scrollY;

        // Check if the section is currently in view
        if (
          scrollPosition >= sectionTop - 100 &&
          scrollPosition < sectionTop + sectionHeight
        ) {
          currentSection = section.id;
        }
      });

      navLinks.forEach((link) => {
        if (link.getAttribute("href") === `#${currentSection}`) {
          link.setAttribute("aria-current", "page");
        } else {
          link.removeAttribute("aria-current");
        }
      });
    }

    // Call the function on scroll
    window.addEventListener("scroll", setActiveLink);

    // Call the function on page load to ensure correct state
    setActiveLink();
  </script>

  <script>
    const burgerButton = document.getElementById("burger-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const openIcon = document.getElementById("streger");
    const closeIcon = document.getElementById("kryds");
    const links = mobileMenu.querySelectorAll("a[data-link]"); // Ensure these are correct links

    // Function to toggle the mobile menu visibility
    function toggleMenu() {
      const isMenuOpen = mobileMenu.classList.contains("opacity-100"); // Check if the menu is open

      // Show/hide the mobile menu
      mobileMenu.classList.toggle("opacity-100", !isMenuOpen); // Open/close the menu
      mobileMenu.classList.toggle("pointer-events-none", isMenuOpen); // Disable pointer events when menu is closed

      // Toggle the burger icon (open and close)
      if (isMenuOpen) {
        // If the menu is open, hide the open icon and show the close icon
        closeIcon.classList.add("opacity-0", "scale-75");
        closeIcon.classList.remove("opacity-100", "scale-100");

        openIcon.classList.add("opacity-100", "scale-100");
        openIcon.classList.remove("opacity-0", "scale-75");
      } else {
        // If the menu is closed, show the open icon and hide the close icon
        closeIcon.classList.add("opacity-100", "scale-100");
        closeIcon.classList.remove("opacity-0", "scale-75");

        openIcon.classList.add("opacity-0", "scale-75");
        openIcon.classList.remove("opacity-100", "scale-100");
      }
    }

    // Toggle the menu when the burger button is clicked
    burgerButton.addEventListener("click", (e) => {
      e.stopPropagation(); // Prevent the click event from propagating
      toggleMenu();
    });

    // Close the mobile menu when clicking anywhere outside the menu or burger button
    document.addEventListener("click", (e) => {
      if (!burgerButton.contains(e.target) && !mobileMenu.contains(e.target)) {
        // Close the menu if it's open
        if (mobileMenu.classList.contains("opacity-100")) {
          toggleMenu();
        }
      }
    });

    // Prevent the mobile menu from closing when clicking inside the menu itself
    mobileMenu.addEventListener("click", (e) => {
      e.stopPropagation(); // Prevent click from propagating to the document listener
    });

    // Close the menu when any link is clicked
    links.forEach((link) => {
      link.addEventListener("click", () => {
        if (mobileMenu.classList.contains("opacity-100")) {
          toggleMenu(); // Close the menu when a link is clicked
        }
      });
    });

    // Close the mobile menu if the background itself (outside of the links) is clicked
    mobileMenu.addEventListener("click", (e) => {
      // If the background is clicked (not the links), close the menu
      if (e.target === mobileMenu) {
        toggleMenu();
      }
    });
  </script>
</header>
